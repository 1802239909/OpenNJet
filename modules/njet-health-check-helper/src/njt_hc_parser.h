

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) Roman Arutyunyan
 * Copyright (C) Nginx, Inc.
 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef PARSER_H
#define PARSER_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef njt_str_t* health_check_interval_t;

typedef njt_str_t* health_check_jitter_t;

typedef njt_str_t* health_check_timeout_t;

typedef int64_t health_check_passes_t;
typedef int64_t health_check_fails_t;
typedef int64_t health_check_port_t;
typedef njt_str_t* health_check_stream_send_t;

typedef njt_str_t* health_check_stream_expect_t;

typedef struct health_check_stream_t_s {
    health_check_stream_send_t send;
    health_check_stream_expect_t expect;
} health_check_stream_t;

typedef njt_str_t* health_check_http_uri_t;

typedef njt_str_t* health_check_http_header_item_t;

typedef njt_array_t  health_check_http_header_t;
typedef njt_str_t* health_check_http_body_t;

typedef njt_str_t* health_check_http_status_t;

typedef struct health_check_http_t_s {
    health_check_http_uri_t uri;
    health_check_http_header_t *header;
    health_check_http_body_t body;
    health_check_http_status_t status;
} health_check_http_t;

typedef bool health_check_ssl_enable_t;
typedef bool health_check_ssl_ntls_t;
typedef njt_str_t* health_check_ssl_ciphers_t;

typedef struct health_check_ssl_t_s {
    health_check_ssl_enable_t enable;
    health_check_ssl_ntls_t ntls;
    health_check_ssl_ciphers_t ciphers;
} health_check_ssl_t;

typedef struct health_check_t_s {
    health_check_interval_t interval;
    health_check_jitter_t jitter;
    health_check_timeout_t timeout;
    health_check_passes_t passes;
    health_check_fails_t fails;
    health_check_port_t port;
    health_check_stream_t *stream;
    health_check_http_t *http;
    health_check_ssl_t *ssl;
} health_check_t;

health_check_stream_send_t get_health_check_stream_send(health_check_stream_t *out);
health_check_stream_expect_t get_health_check_stream_expect(health_check_stream_t *out);
health_check_http_header_item_t get_health_check_http_header_item(health_check_http_header_t *out, size_t idx);
health_check_http_uri_t get_health_check_http_uri(health_check_http_t *out);
// CHECK ARRAY not exceeding bounds before call this func
health_check_http_header_t* get_health_check_http_header(health_check_http_t *out);
health_check_http_body_t get_health_check_http_body(health_check_http_t *out);
health_check_http_status_t get_health_check_http_status(health_check_http_t *out);
health_check_ssl_enable_t get_health_check_ssl_enable(health_check_ssl_t *out);
health_check_ssl_ntls_t get_health_check_ssl_ntls(health_check_ssl_t *out);
health_check_ssl_ciphers_t get_health_check_ssl_ciphers(health_check_ssl_t *out);
health_check_interval_t get_health_check_interval(health_check_t *out);
health_check_jitter_t get_health_check_jitter(health_check_t *out);
health_check_timeout_t get_health_check_timeout(health_check_t *out);
health_check_passes_t get_health_check_passes(health_check_t *out);
health_check_fails_t get_health_check_fails(health_check_t *out);
health_check_port_t get_health_check_port(health_check_t *out);
health_check_stream_t* get_health_check_stream(health_check_t *out);
health_check_http_t* get_health_check_http(health_check_t *out);
health_check_ssl_t* get_health_check_ssl(health_check_t *out);
// INITIALIZATION IS NEEDED for string
void set_health_check_interval(health_check_t* obj, health_check_interval_t field);
// INITIALIZATION IS NEEDED for string
void set_health_check_jitter(health_check_t* obj, health_check_jitter_t field);
// INITIALIZATION IS NEEDED for string
void set_health_check_timeout(health_check_t* obj, health_check_timeout_t field);
// INITIALIZATION IS NEEDED for string
void set_health_check_stream_send(health_check_stream_t* obj, health_check_stream_send_t field);
// INITIALIZATION IS NEEDED for string
void set_health_check_stream_expect(health_check_stream_t* obj, health_check_stream_expect_t field);
health_check_stream_t* create_health_check_stream(njt_pool_t *pool);
// INITIALIZATION IS NEEDED for object or array
void set_health_check_stream(health_check_t* obj, health_check_stream_t* field);
// INITIALIZATION IS NEEDED for string
void set_health_check_http_uri(health_check_http_t* obj, health_check_http_uri_t field);
int add_item_health_check_http_header(health_check_http_header_t *src, health_check_http_header_item_t items);
health_check_http_header_t* create_health_check_http_header(njt_pool_t *pool, size_t length);
// INITIALIZATION IS NEEDED for object or array
void set_health_check_http_header(health_check_http_t* obj, health_check_http_header_t* field);
// INITIALIZATION IS NEEDED for string
void set_health_check_http_body(health_check_http_t* obj, health_check_http_body_t field);
// INITIALIZATION IS NEEDED for string
void set_health_check_http_status(health_check_http_t* obj, health_check_http_status_t field);
health_check_http_t* create_health_check_http(njt_pool_t *pool);
// INITIALIZATION IS NEEDED for object or array
void set_health_check_http(health_check_t* obj, health_check_http_t* field);
// INITIALIZATION IS NEEDED for string
void set_health_check_ssl_ciphers(health_check_ssl_t* obj, health_check_ssl_ciphers_t field);
health_check_ssl_t* create_health_check_ssl(njt_pool_t *pool);
// INITIALIZATION IS NEEDED for object or array
void set_health_check_ssl(health_check_t* obj, health_check_ssl_t* field);
health_check_t* create_health_check(njt_pool_t *pool);
health_check_t* json_parse_health_check(njt_pool_t *pool, const njt_str_t *json_string, njt_str_t *err_str);
njt_str_t* to_json_health_check(njt_pool_t *pool, health_check_t *out, njt_int_t flags);
#endif /* PARSER_H */
